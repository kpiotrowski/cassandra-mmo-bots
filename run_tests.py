from pprint import pprint
import os
import shutil
import time
import subprocess
import threading


nodesCount = 4
seedsAdresses = ["10.0.0.3", "10.10.10.3"]
partitionWaitSec = 60
partitionTime = 30



jarLocation = "target/CassandraMmoBots-1.0-SNAPSHOT.jar"
mainClass = "mmobots.Main"

testDirectory = "src/main/resources/tests"
resultDirectory = "results"


class ConfigFile:
    nodes= "10.0.0.3"
    nodesName = "nodes"
#Number of bots generated by every instance of application
    botsNumber=100
    botsNumberName = "botsNumber"
#Size of the map
    mapSize=20
    mapSizeName = "mapSize"
#How long the algorithm should work in seconds
    collectingTime=180
    collectingTimeName = "collectingTime"
#Size of the bot backpack
    backpackLimit=7
    backpackLimitName = "backpackLimit"
#How much gold bot collects every second
    collectingSpeed=3
    collectingSpeedName = "collectingSpeed"
#Travel speed step/sec
    travelSpeed=1
    travelSpeedName = "travelSpeed"
#Waiting time for synchronization
    waitingTime=1.0
    waitingTimeName = "waitingTime"

    def writeLine(self,file,name,value):
        file.write(name+"="+str(value)+"\r\n")

    def writeConfig(self, fileName):
        file = open(fileName,"w+")
        self.writeLine(file,self.nodesName,self.nodes)
        self.writeLine(file,self.botsNumberName,self.botsNumber)
        self.writeLine(file,self.mapSizeName,self.mapSize)
        self.writeLine(file,self.collectingTimeName,self.collectingTime)
        self.writeLine(file,self.backpackLimitName,self.backpackLimit)
        self.writeLine(file,self.collectingSpeedName,self.collectingSpeed)
        self.writeLine(file,self.travelSpeedName,self.travelSpeed)
        self.writeLine(file,self.waitingTimeName,self.waitingTime)
        file.close()
        return fileName

os.system("mvn compile")

if os.path.exists(testDirectory):
    shutil.rmtree(testDirectory)
os.makedirs(testDirectory)

if os.path.exists(resultDirectory):
    shutil.rmtree(resultDirectory)
os.makedirs(resultDirectory)

def getDirectoryPath(folderName,baseDir):
    dir = baseDir + "/" + folderName
    if not os.path.exists(dir):
        os.makedirs(dir)
    return dir

def partition():
    time.sleep(partitionWaitSec)
    print("Runing partition")
    run = "scripts/partition.sh " + str(partitionTime)
    os.system(run)

def createAndRunTest(configFile, dir):
    print("Running " + dir)
    seedsFiles = []
    for id,sa in enumerate(seedsAdresses):
        configFile.nodes=sa
        seedName = configFile.writeConfig(dir+"/seed"+str(id))
        splits = seedName.split('resources/', 1);
        seedsFiles.append(splits[1])
    seedsCountPerNode = nodesCount//len(seedsFiles)
    os.system("mvn package")
    processes = []
    resultFile = resultDirectory + dir.split('tests', 1)[1];
    os.makedirs(resultFile)
    resultFile += "/results"
    for i in range(2):
        os.system("./scripts/cassandra_restart.sh")
        for node in range(nodesCount):
            if node == (nodesCount-1):
                seed = seedsFiles[-1]
            else:
                index = node // seedsCountPerNode
                seed = seedsFiles[index]
            run = "java -cp " +jarLocation + " " + mainClass + " " + seed + " > /dev/null 2>/tmp/node"+str(node+1)
            p =subprocess.Popen(run, shell=True)
            processes.append(p)
        if i == 1:
            resultFile += "_partition"
            t = threading.Thread(name="partition",target=partition)
            t.start()
            t.join()
        exit_codes = [p.wait() for p in processes]
        for id, e in enumerate(exit_codes):
            if e != 0:
                print("Node "+ str(id) + " exited with code " + str(e))
        os.system("python scripts/generate_results.py " + resultFile)

def runbotTest():
    botDir = getDirectoryPath("bot",testDirectory)
    for botCount in [5, 10, 40, 50,100]:
        configDir = getDirectoryPath(str(botCount),botDir)
        configFile = ConfigFile()
        configFile.botsNumber = botCount
        createAndRunTest(configFile, configDir)

def runwaitTimeTest():
    waitTimeDir = getDirectoryPath("waitTime",testDirectory)
    for timeSec in [0.1,0.5,2,3,5]:
        configDir = getDirectoryPath(str(timeSec),waitTimeDir)
        configFile = ConfigFile()
        configFile.waitingTime = timeSec
        createAndRunTest(configFile, configDir)


def main():
    runbotTest()
    runwaitTimeTest()




if __name__ == '__main__':
    main()